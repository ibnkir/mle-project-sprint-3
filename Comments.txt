Комментарии KN после 2-й итерации
08.06.2024

Привет, 
 
по результатам 2-х наших проектов у меня сложилось впечатление, 
что ты, к сожалению, не очень внимательно читаешь md-файлы и другие приложенные материалы. 
Например, о том же нагрузочном скрипте generate_requests.py у меня сказано
и в readme (раздел `описание репозитория` внизу), и в инструкции,
но ты его почему-то не нашла.
Из-за этого я немного переживаю, что ты можешь снова что-то упустить в моих объяснениях ниже
и мы уйдем на следующий круг.
Давай пжл ценить время друг друга.
Я внимательно читаю твои комментарии и жду от тебя того же.
Также большая просьба более четко и ясно формулировать свои мысли, даже если ты очень торопишься. 
К сожалению, я не понимаю некоторые из твоих комментариев.
Если у тебя мало времени, то просьба очень срочно (!!!) и в рабочем порядке 
передать проверку своим коллегам. 
Для 3-й итерации, если она понадобится, я собственно предлагаю так и сделать. 
Я ценю конструктивные комментарии и советы, это очень важная часть курса,
но терять время из-за недопонимания по чужой невнимательности не хочу, сорри.


Теперь по порядку.

__________________________________________
Твой комментарий:
"Запрос не сработал. Я полностью скопировала в Swagger UI запрос и отправила его через UI, 
и через командную строку тот же, результат: 
{"status":"Error","message":"Problem with request, 'str' object has no attribute 'transform'"}."


- Копировать запрос в Swagger не нужно. 
На странице /docs тебе надо развернуть зеленую панель POST, 
нажать Try it out, и чуть ниже появится поле Requested body,
где уже заполнены все параметры модели по умолчанию. Тебе остается только нажать Execute.
И ниже - в поле Response body - ты увидишь json с ответом. Н-р, такой:
{
  "status": "OK",
  "score": 8494489.99991846
}

Далее в том же поле Requested body ты можешь менять значения параметров модели, 
сделать их неправильными, удалить какие-то из них итд итп.
Например, если ты поставишь минус у кол-ва этажей, то получишь ответ:
{
  "status": "Error",
  "message": "Some numerical features in model params are negative"
}

А что и куда ты копировала, я не могу понять. Ты получила
{"status":"Error","message":"Problem with request, 'str' object has no attribute 'transform'"},
потому что вместо числовых значений вставила строковые. То же самое происходит,
когда ты отправляешь пост-запросы чз терминал. 
Вообще, на спринте мы не отправляли пост-запросы через терминал,
т.к. в этом случае легко ошибиться, там же куча параметров, требуется особое форматирование итд итп. 
Вот с гет-запросом, когда мало параметров, тогда другое дело.
Но из гет-запросов у меня только обращение к корневому url.
Поэтому сценарий отправки параметров чз терминал я комментировать не буду.
Тестируй сервис четко по моей инструкции.
Надеюсь, этот вопрос закрыт. 
__________________________________________

Твой комментарий в файле fastapi_app.py:
"Для продуктового кода скрипт в формате "строчка за строчкой" - практика которую давно не используют. 
Код должен быть обернут в методы, классы...
...Все что мы хотим сделать, при прямом запуске скрипта должно прописываться в блоке 
в самом низу скрипта if __name__ == '__main__':
Подробнее: https://realpython.com/if-name-main-python/
"

- А причем здесь main и эта ссылка? Когда мы выполняем команду
uvicorn ml_service.fastapi_app:app --reload --port 1702 --host 0.0.0.0
то это не прямой запуск, здесь main не вызывается. 
Main у меня есть, например, в fastapi_handler.py, чтобы протестировать обработчик без вызова unicorn.
А что касается классов, то да, это конструктивный коммент, спасибо. 
Я обернул приложение в класс.
__________________________________________

Комментарий в файле fastapi_handler.py:
"..там где bool, было бы хорошо оставить и инт, если пользователь захочет ввести 1 или 0, вместо True/False"

- Ок, добавил. 
__________________________________________

Комментарий в файле fastapi_handler.py: 
"В своей модели которую ты обучал, скорее всего были скейлеры и прочие преобразователи признаков. 
Не увидела что ты тут их используешь. Модель должна получать данные в точно таком же формате, 
на чем она обучалась. Иначе для нее это будут данные которые она никогда не видела..."

- Я использую пайплайн, включающий в себя все трансформеры данных и саму регрессионную модель,
  и я упомянул об этом в самом начале readme,
  и файл называется соответствующим образом: "flats_prices_pipeline.pkl",
  и в ноутбуке все это можно увидеть, включая структуру пайплайна, пример инференса, 
  что подается на вход, какой выход итд итп.

  Поэтому мне НЕ нужно дополнительно применять скейлеры и прочие трансформеры,
  я подаю на вход пайплайна данные в том же виде, что и в исходном датасете.
  Единственно, что я делаю явно перед вызовом predict у пайплайна, это считаю возраст здания
  и удаляю год постройки. То же самое я делал и при обучении модели. Там еще я удалял параметр 
  studio, т.к. он был константным. А здесь я проверяю, не передал ли его пользователь.
  И если передал, то выкидываю из словаря еще на этапе валидации запроса.
________________________________________

Комментарий по Этапу 2:
"Запустилось, но запрос выдает ту же ошибку, что логично, т.к. сервис тот же. 
Надо поправить. Кроме того докер почему то не останавливается Ctrl+C, зависает все. 
Приходится из другого терминала стопать по ID. Не знаю почему, может не хватает ресурсов..."

- По поводу ошибки, см. выше. Ошибки там быть не может, если тестировать правильно.

  Ctrl+C в режиме Docker Compose не останавливает контейнеры, а просто освобождает терминал,
  т.е. контейнеры продолжают работать, но в фоновом режиме. В этом можно убедиться,
  если, например, после Ctrl+C ввести команду docker compose ls или же curl 127.0.0.1:1702
  Для остановки контейнеров см. мою инструкцию. И ID там не нужны.
  
  Неужели моя инструкция действительно так плохо написана, что ты ее не читаешь? :(
__________________________________________

Комментарии по Этапам 3-4:

"Для того чтобы вывелись данные на дашборд графаны, 
нужно написать скрипт нагрузочный, симулирующий нагрузку, где посылается несколько запросов 
питоновский или шелл. Это есть в задании к этапу 4."

- Файл с нагрузочным скриптом есть, он называется generate_requests.py. 
  О нем говорится и в readme, и в инструкции.  
  Для его запуска нужно перейти в папку services (см. инструкцию)
  
  
"Ревьюер не должен создавать панели и вручную выражения отправлять. Это тоже нужно поправить."

- Да, действительно, у нас этого не было в спринте, поэтому не сразу догадался.
  Обновил соответствующий пункт в файле с инструкциями, теперь все отображается.


"Кстати я в конце запустила скрипт 
для проверки верных - неверных запросов, все с одной и той же багой падают как в этапе 1 я описала."

- А здесь я вообще ничего не понял. Ты же выше написала, что не нашла 
  мой нагрузочный скрипт, а здесь пишешь, что все-таки что-то запустила. 
  Или о каком скрипте речь? 
  Если ты написала какой-то свой собственный скрипт, то тогда там та же ошибка
  с передачей строковых параметров вместо чисел. Но искать эту ошибку мы не будем,
  потому что это твой код, а не мой.
  
  Мой скрипт generate_requests.py не делает "проверку верных - неверных запросов", 
  он просто генерирует корректные и ошибочные запросы. 
  Для корректных запросов он берет данные из исходного датасета.
  После его запуска можно увидеть ответы сервиса в терминале, и там видно, что все работает корректно. 
  Результаты потом можно также увидеть на /metrics, в прометеусе и в графана разумеется.
  В общем, здесь НЕТ никакой баги. Надеюсь, этот вопрос тоже закрыт.
